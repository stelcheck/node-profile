#!/usr/bin/env node

var exec = require('child_process').exec
, fs = require('fs')
, os = require('os')
, path = require('path');

process.addListener('SIGINT', function () {});

var logName = 'profile-'+Date.now()+Math.floor(Math.random()*10000)+'.log';
var args = {};
var profLazy = false;
process.argv.splice(3).join(' ').split('-').forEach(function (arg) {
    var argParts = arg.split('=');

    if(argParts[0].trim() == "prof_lazy") {
        profLazy = true;
    }
    if (argParts[0] && argParts[1]) {
        args[argParts[0].trim()] = argParts[1].trim();
    }
});

if(path.extname(process.argv[2]) === '.coffee') {
    var command = 'coffee --nodejs "--prof'+(profLazy ? ' --prof_lazy':'')+' --log-snapshot-positions --logfile='+logName+'" '+process.argv[2];
} else {
    var command = 'node --prof'+(profLazy ? ' --prof_lazy':'')+' --log-snapshot-positions --logfile='+logName+' '+process.argv[2];
}

var tick_processor = "linux-tick-processor"

if(os.type() === 'Darwin') {
    tick_processor = "mac-tick-processor"
}

console.log('Running: '+command);

process.env.PATH = process.env.NVM_DIR + '/src/node-'+process.version+'/deps/v8/tools:'
                 + process.env.NVM_DIR + '/src/node-'+process.version+'/deps/v8:'
                 + process.env.PATH;

exec(command).on('exit', function (code, signal) {
    console.log('Running: ' + process.env.NVM_DIR + '/src/node-'+process.version+'/deps/v8/tools/linux-tick-processor '+logName)
    exec('linux-tick-processor '+logName, function (err, stdout, stderr) {
        if (!err) {
            if (args.o) {
                fs.writeFile(args.o, stdout, function (err) {
                    if (err) {
                        throw err;
                    } else {
                        console.log(style(33, '\nSaved output to '+args.o));
                    }
                });
            } else {
                console.log(colorFormat(stdout));
            }
        } else {
            console.log(style(31, '\nCould not generate profile.\n\n'+err.message));
            console.log('-- Word to the wise man: Maybe you need to make sure d8 is compiled? --')
            console.log('pushd ' + process.env.NVM_DIR + '/src/node-' + process.version + '/deps/v8');
            console.log(process.env.NVM_DIR + '/src/node-' + process.version + '/deps/v8/SConstruct:845 change to \'LIBS\': [\'readline\', \'termcap\'] on CentOS');
            console.log('run scons mode=debug arch=x64 console=readline d8');
            console.log('ln -s d8_g d8');
            console.log('popd');

        }

        fs.unlink(logName, function (err) {
            if (err) {
                throw err;
            }
            console.log('Successfully deleted temporary: '+logName);
        });
    });
});

function colorFormat(profileLog) {
    var lines = profileLog.split('\n');
    var newLog = [];

    lines.forEach(function (line) {
        if (line.match(/ *\[.*\]/)) {
            newLog.push(style(33, line));
        } else if (line.match(/^[^ ]/)) {
            newLog.push(style(37, line));
        } else if (line.match(/^   [^ 0-9]/)) {
            newLog.push(style(35, line));
        } else {
            newLog.push(line.replace(/ *([^ ]+)/, function (match) {
                return style(31, match);
            }).replace(/([0-9]+\.[0-9]+%)/g, function (match) {
                return style(33, match);
            }));
        }
    });

    return newLog.join('\n');
}

function style(colorCode, str) {
    return '\x1B[1m\x1B['+colorCode+'m'+str+'\x1B[0m';
}
